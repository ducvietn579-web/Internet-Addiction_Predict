# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I60n3HauP0RgaS3CbSUcn1zoMoDfrhlP
"""

# Commented out IPython magic to ensure Python compatibility.

# %pip install category_encoders

import pandas as pd
import joblib
import category_encoders as ce
import numpy as np

from flask import Flask
app = Flask(_name_)


def classify_addiction(score):
  if score >= 7:
    return "Nguy cơ cao"
  elif score >= 4:
    return "Nguy cơ trung bình"
  else:
    return "Nguy cơ thấp"

try:
    GD_model, GD_encoder = joblib.load('GDmodel_enc.rpk')
    rf_model, rf_encoder = joblib.load('rfmodel_enc.rpk')
    model = xgb.XGBRegressor()
    model.load_model("xgb_model.json")
except FileNotFoundError:
    print("Error loading model files. Please ensure 'GDmodel_enc.rpk', 'rfmodel_enc.rpk', and 'XGmodel_enc.rpk' are in the correct path.")
    # You might want to exit or handle this error appropriately
    exit()


new_input_data = {
    'Gender': ['Female'],
    'Academic_Level': ['Undergraduated'],
    'Sleep_Hours_Per_Night': [10],
    'Relationship_Status': ['Single'],
    'Mental_Health_Score': [1],
    'Most_Used_Platform': ['Youtube'],
    'Avg_Daily_Usage_Hours': [12]
}

new_input = pd.DataFrame(new_input_data)

categorical_cols = ['Gender', 'Academic_Level', 'Relationship_Status', 'Most_Used_Platform']
new_input[categorical_cols] = new_input[categorical_cols].apply(lambda x: x.str.strip().str.lower())

def predict_with_model(model, encoder, name):
    try:
        new_input_enc = encoder.transform(new_input)

        expected_features = encoder.get_feature_names_out()
        new_input_enc = new_input_enc.reindex(columns=expected_features, fill_value=0)

        prediction = model.predict(new_input_enc)
        level = classify_addiction(prediction[0])

        print(f"\n Mô hình {name} dự đoán điểm nghiện: {prediction[0]:.2f}")
        print(f"Mức độ nghiện dự đoán ({name}): {level}")
    except Exception as e:
        print(f"Error predicting with {name} model: {e}")


if 'rf_model' in locals() and rf_model is not None:
    predict_with_model(rf_model, rf_encoder, "Random Forest")

if 'GD_model' in locals() and GD_model is not None:
    predict_with_model(GD_model, GD_encoder, "Gradient Boosting")

if 'XG_model' in locals() and XG_model is not None:
    predict_with_model(XG_model, XG_encoder, "XGBoost")

